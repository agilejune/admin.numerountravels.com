{"version":3,"sources":["components/common/forms/components/BaseButtonsGroup/BaseButtonsGroup.tsx","components/common/forms/BaseButtonsForm/BaseButtonsForm.tsx","components/profile/profileCard/profileFormNav/nav/PersonalInfo/FirstNameItem/FirstNameItem.tsx","components/profile/profileCard/profileFormNav/nav/PersonalInfo/LastNameItem/LastNameItem.tsx","components/profile/profileCard/profileFormNav/nav/PersonalInfo/PhoneItem/PhoneItem.styles.ts","components/profile/profileCard/profileFormNav/nav/PersonalInfo/PhoneItem/PhoneItem.tsx","components/profile/profileCard/profileFormNav/nav/PersonalInfo/EmailItem/EmailItem.tsx","components/profile/profileCard/profileFormNav/nav/PersonalInfo/PersonalInfo.tsx","pages/PersonalInfoPage.tsx"],"names":["BaseButtonsGroup","className","onCancel","loading","props","t","useTranslation","gutter","wrap","span","Button","block","type","onClick","htmlType","BaseButtonsForm","form","isFieldsChanged","setFieldsChanged","footer","children","BaseForm","useForm","formDefault","currentForm","resetFields","Title","BaseFormTitle","Item","BaseFormItem","List","BaseFormList","Provider","FirstNameItem","name","label","Input","LastNameItem","PhoneNumberInput","styled","PhoneInput","BORDER_RADIUS","PhoneItem","required","verified","$isSuccess","$successText","rules","message","validator","_","value","isValidPhoneNumber","Promise","resolve","reject","Error","disabled","EmailItem","initialPersonalInfoValues","firstName","lastName","phone","email","PersonalInfo","user","useAppSelector","state","useState","isLoading","setLoading","userFormValues","useMemo","first_name","last_name","phone_number","onFinish","useCallback","setTimeout","notificationController","success","Card","initialValues","onFieldsChange","xs","md","xl","PersonalInfoPage","PageTitle"],"mappings":"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","file":"static/js/4.7933c4be.chunk.js","sourcesContent":["import React, { ComponentProps } from 'react';\nimport { Col, Row } from 'antd';\nimport { Button } from '@app/components/common/buttons/Button/Button';\nimport { useTranslation } from 'react-i18next';\n\ninterface BaseButtonsGroupProps extends ComponentProps<typeof Button> {\n  className?: string;\n  onCancel: () => void;\n  loading?: boolean;\n}\n\nexport const BaseButtonsGroup: React.FC<BaseButtonsGroupProps> = ({ className, onCancel, loading, ...props }) => {\n  const { t } = useTranslation();\n\n  return (\n    <Row className={className} gutter={[10, 10]} wrap={false}>\n      <Col span={12}>\n        <Button block type=\"ghost\" onClick={onCancel} {...props}>\n          {t('common.cancel')}\n        </Button>\n      </Col>\n      <Col span={12}>\n        <Button block type=\"primary\" loading={loading} htmlType=\"submit\" {...props}>\n          {t('common.save')}\n        </Button>\n      </Col>\n    </Row>\n  );\n};\n","import React from 'react';\nimport { BaseForm, BaseFormInterface, BaseFormProps } from '@app/components/common/forms//BaseForm/BaseForm';\nimport { BaseButtonsGroup } from '@app/components/common/forms/components/BaseButtonsGroup/BaseButtonsGroup';\nimport { BaseFormTitle } from '@app/components/common/forms/components/BaseFormTitle/BaseFormTitle';\nimport { BaseFormItem } from '@app/components/common/forms/components/BaseFormItem/BaseFormItem';\nimport { BaseFormList } from '@app/components/common/forms/components/BaseFormList/BaseFormList';\n\nexport interface BaseButtonsFormProps extends BaseFormProps {\n  isFieldsChanged: boolean;\n  setFieldsChanged?: (state: boolean) => void;\n  footer?: React.ReactElement;\n  loading?: boolean;\n}\n\nexport const BaseButtonsForm: BaseFormInterface<BaseButtonsFormProps> = ({\n  form,\n  isFieldsChanged,\n  setFieldsChanged,\n  footer,\n  loading = false,\n  children,\n  ...props\n}) => {\n  const [formDefault] = BaseForm.useForm();\n  const currentForm = form || formDefault;\n\n  const onCancel = () => {\n    currentForm?.resetFields();\n    setFieldsChanged && setFieldsChanged(false);\n  };\n\n  return (\n    <BaseForm form={currentForm} {...props}>\n      {children}\n      {isFieldsChanged && (footer || <BaseButtonsGroup loading={loading} onCancel={onCancel} />)}\n    </BaseForm>\n  );\n};\n\nBaseButtonsForm.Title = BaseFormTitle;\nBaseButtonsForm.Item = BaseFormItem;\nBaseButtonsForm.List = BaseFormList;\nBaseButtonsForm.useForm = BaseForm.useForm;\nBaseButtonsForm.Provider = BaseForm.Provider;\n","import React from 'react';\nimport { Input } from '@app/components/common/inputs/Input/Input';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\n\nexport const FirstNameItem: React.FC = () => {\n  return (\n    <BaseButtonsForm.Item name=\"firstName\" label=\"FirstName\">\n      <Input />\n    </BaseButtonsForm.Item>\n  );\n};\n","import React from 'react';\nimport { Input } from '@app/components/common/inputs/Input/Input';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\n\nexport const LastNameItem: React.FC = () => {\n  return (\n    <BaseButtonsForm.Item name=\"lastName\" label=\"LastName\">\n      <Input />\n    </BaseButtonsForm.Item>\n  );\n};\n","import { BORDER_RADIUS } from '@app/styles/themes/constants';\nimport PhoneInput from 'react-phone-number-input/input';\nimport styled from 'styled-components';\n\nexport const PhoneNumberInput = styled(PhoneInput)`\n  height: 50px;\n  width: 100%;\n  padding: 8px 11px;\n  transition: all 0.3s;\n\n  color: var(--text-main-color);\n\n  border: 1px solid var(--border-color);\n\n  border-radius: ${BORDER_RADIUS};\n\n  &:hover {\n    border-color: #1d72b8;\n  }\n\n  &:focus {\n    outline: 0;\n    box-shadow: 0 0 0 2px rgb(0 89 171 / 20%);\n  }\n`;\n","import React from 'react';\nimport { isValidPhoneNumber } from 'react-phone-number-input';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport * as S from './PhoneItem.styles';\n\ninterface PhoneItemsProps {\n  required?: boolean;\n  onClick?: () => void;\n  verified?: boolean;\n}\n\nexport const PhoneItem: React.FC<PhoneItemsProps> = ({ required, onClick, verified }) => {\n  return (\n    <BaseButtonsForm.Item\n      name=\"phone\"\n      $isSuccess={verified}\n      $successText=\"Verified\"\n      label=\"Phone\"\n      rules={[\n        { required, message: 'Required Field' },\n        () => ({\n          validator(_, value) {\n            if (!value || isValidPhoneNumber(value)) {\n              return Promise.resolve();\n            }\n            return Promise.reject(new Error('Wrong number'));\n          },\n        }),\n      ]}\n    >\n      <S.PhoneNumberInput disabled={verified} className=\"ant-input\" onClick={onClick} />\n    </BaseButtonsForm.Item>\n  );\n};\n","import React from 'react';\nimport { FormItemProps } from 'antd';\nimport { Input } from '@app/components/common/inputs/Input/Input';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\n\ninterface EmailItemProps extends FormItemProps {\n  verified?: boolean;\n  onClick?: () => void;\n}\n\nexport const EmailItem: React.FC<EmailItemProps> = ({ required, onClick, verified, ...props }) => {\n  return (\n    <BaseButtonsForm.Item\n      name=\"email\"\n      $isSuccess={verified}\n      $successText=\"Verified\"\n      label=\"Email\"\n      rules={[\n        { required, message: 'This field is required!' },\n        {\n          type: 'email',\n          message: 'Please input a valid email address!',\n        },\n      ]}\n      {...props}\n    >\n      <Input disabled={verified} onClick={onClick} />\n    </BaseButtonsForm.Item>\n  );\n};\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { Col, Row } from 'antd';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { Card } from '@app/components/common/Card/Card';\nimport { FirstNameItem } from '@app/components/profile/profileCard/profileFormNav/nav/PersonalInfo/FirstNameItem/FirstNameItem';\nimport { LastNameItem } from '@app/components/profile/profileCard/profileFormNav/nav/PersonalInfo/LastNameItem/LastNameItem';\nimport { PhoneItem } from '@app/components/profile/profileCard/profileFormNav/nav/PersonalInfo/PhoneItem/PhoneItem';\nimport { EmailItem } from '@app/components/profile/profileCard/profileFormNav/nav/PersonalInfo/EmailItem/EmailItem';\nimport { useAppSelector } from '@app/hooks/reduxHooks';\nimport { notificationController } from '@app/controllers/notificationController';\n\ninterface PersonalInfoFormValues {\n  lastName: string;\n  firstName: string;\n  phone: string;\n  email: string;\n}\n\nconst initialPersonalInfoValues: PersonalInfoFormValues = {\n  firstName: '',\n  lastName: '',\n  phone: '',\n  email: '',\n};\n\nexport const PersonalInfo: React.FC = () => {\n  const user = useAppSelector((state) => state.user.user);\n\n  const [isFieldsChanged, setFieldsChanged] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n\n  const userFormValues = useMemo(\n    () =>\n      user\n        ? {\n            firstName: user.first_name,\n            lastName: user.last_name,\n            email: user.email,\n            phone: user.phone_number,\n          }\n        : initialPersonalInfoValues,\n    [user],\n  );\n\n  const [form] = BaseButtonsForm.useForm();\n\n  const onFinish = useCallback(() => {\n    // todo dispatch an action here\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      setFieldsChanged(false);\n      notificationController.success({ message: 'Success' });\n    }, 1000);\n  }, []);\n\n  return (\n    <Card>\n      <BaseButtonsForm\n        form={form}\n        name=\"info\"\n        loading={isLoading}\n        initialValues={userFormValues}\n        isFieldsChanged={isFieldsChanged}\n        setFieldsChanged={setFieldsChanged}\n        onFieldsChange={() => setFieldsChanged(true)}\n        onFinish={onFinish}\n      >\n        <Row gutter={{ xs: 10, md: 15, xl: 30 }}>\n          <Col span={24}>\n            <BaseButtonsForm.Item>\n              <BaseButtonsForm.Title>Personal Info</BaseButtonsForm.Title>\n            </BaseButtonsForm.Item>\n          </Col>\n\n          <Col xs={24} md={12}>\n            <FirstNameItem />\n          </Col>\n\n          <Col xs={24} md={12}>\n            <LastNameItem />\n          </Col>\n\n          <Col span={24}>\n            <BaseButtonsForm.Item>\n              <BaseButtonsForm.Title>Contact Info</BaseButtonsForm.Title>\n            </BaseButtonsForm.Item>\n          </Col>\n\n          <Col xs={24} md={12}>\n            <PhoneItem verified={true} />\n          </Col>\n\n          <Col xs={24} md={12}>\n            <EmailItem verified={true} />\n          </Col>\n        </Row>\n      </BaseButtonsForm>\n    </Card>\n  );\n};\n","import React from 'react';\nimport { PersonalInfo } from '@app/components/profile/profileCard/profileFormNav/nav/PersonalInfo/PersonalInfo';\nimport { PageTitle } from '@app/components/common/PageTitle/PageTitle';\n\nconst PersonalInfoPage: React.FC = () => {\n  return (\n    <>\n      <PageTitle>Personal Info</PageTitle>\n      <PersonalInfo />\n    </>\n  );\n};\n\nexport default PersonalInfoPage;\n"],"sourceRoot":""}