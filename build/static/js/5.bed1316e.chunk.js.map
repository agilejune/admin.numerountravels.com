{"version":3,"sources":["components/common/forms/components/BaseButtonsGroup/BaseButtonsGroup.tsx","components/common/forms/BaseButtonsForm/BaseButtonsForm.tsx","components/profile/profileCard/profileFormNav/nav/SecuritySettings/passwordForm/ConfirmPasswordItem/ConfirmPasswordItem.tsx","components/profile/profileCard/profileFormNav/nav/SecuritySettings/passwordForm/CurrentPasswordItem/CurrentPasswordItem.tsx","constants/patterns.ts","components/profile/profileCard/profileFormNav/nav/SecuritySettings/passwordForm/NewPasswordItem/NewPasswordItem.tsx","components/profile/profileCard/profileFormNav/nav/SecuritySettings/passwordForm/PasswordForm/PasswordForm.styles.ts","components/profile/profileCard/profileFormNav/nav/SecuritySettings/passwordForm/PasswordForm/PasswordForm.tsx","components/profile/profileCard/profileFormNav/nav/SecuritySettings/SecuritySettings.tsx","pages/SecuritySettingsPage.tsx"],"names":["BaseButtonsGroup","className","onCancel","loading","props","t","useTranslation","gutter","wrap","span","Button","block","type","onClick","htmlType","BaseButtonsForm","form","isFieldsChanged","setFieldsChanged","footer","children","BaseForm","useForm","formDefault","currentForm","resetFields","Title","BaseFormTitle","Item","BaseFormItem","List","BaseFormList","Provider","ConfirmItemPassword","name","label","dependencies","rules","required","message","getFieldValue","validator","_","value","Promise","reject","Error","resolve","InputPassword","CurrentPasswordItem","passwordPattern","RegExp","NewPasswordItem","pattern","Btn","styled","media","md","xl","PasswordForm","useState","isLoading","setLoading","requiredMark","onFieldsChange","onFinish","values","setTimeout","notificationController","success","console","log","xs","SecuritySettings","Card","SecuritySettingsPage","PageTitle"],"mappings":"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","file":"static/js/5.bed1316e.chunk.js","sourcesContent":["import React, { ComponentProps } from 'react';\nimport { Col, Row } from 'antd';\nimport { Button } from '@app/components/common/buttons/Button/Button';\nimport { useTranslation } from 'react-i18next';\n\ninterface BaseButtonsGroupProps extends ComponentProps<typeof Button> {\n  className?: string;\n  onCancel: () => void;\n  loading?: boolean;\n}\n\nexport const BaseButtonsGroup: React.FC<BaseButtonsGroupProps> = ({ className, onCancel, loading, ...props }) => {\n  const { t } = useTranslation();\n\n  return (\n    <Row className={className} gutter={[10, 10]} wrap={false}>\n      <Col span={12}>\n        <Button block type=\"ghost\" onClick={onCancel} {...props}>\n          {t('common.cancel')}\n        </Button>\n      </Col>\n      <Col span={12}>\n        <Button block type=\"primary\" loading={loading} htmlType=\"submit\" {...props}>\n          {t('common.save')}\n        </Button>\n      </Col>\n    </Row>\n  );\n};\n","import React from 'react';\nimport { BaseForm, BaseFormInterface, BaseFormProps } from '@app/components/common/forms//BaseForm/BaseForm';\nimport { BaseButtonsGroup } from '@app/components/common/forms/components/BaseButtonsGroup/BaseButtonsGroup';\nimport { BaseFormTitle } from '@app/components/common/forms/components/BaseFormTitle/BaseFormTitle';\nimport { BaseFormItem } from '@app/components/common/forms/components/BaseFormItem/BaseFormItem';\nimport { BaseFormList } from '@app/components/common/forms/components/BaseFormList/BaseFormList';\n\nexport interface BaseButtonsFormProps extends BaseFormProps {\n  isFieldsChanged: boolean;\n  setFieldsChanged?: (state: boolean) => void;\n  footer?: React.ReactElement;\n  loading?: boolean;\n}\n\nexport const BaseButtonsForm: BaseFormInterface<BaseButtonsFormProps> = ({\n  form,\n  isFieldsChanged,\n  setFieldsChanged,\n  footer,\n  loading = false,\n  children,\n  ...props\n}) => {\n  const [formDefault] = BaseForm.useForm();\n  const currentForm = form || formDefault;\n\n  const onCancel = () => {\n    currentForm?.resetFields();\n    setFieldsChanged && setFieldsChanged(false);\n  };\n\n  return (\n    <BaseForm form={currentForm} {...props}>\n      {children}\n      {isFieldsChanged && (footer || <BaseButtonsGroup loading={loading} onCancel={onCancel} />)}\n    </BaseForm>\n  );\n};\n\nBaseButtonsForm.Title = BaseFormTitle;\nBaseButtonsForm.Item = BaseFormItem;\nBaseButtonsForm.List = BaseFormList;\nBaseButtonsForm.useForm = BaseForm.useForm;\nBaseButtonsForm.Provider = BaseForm.Provider;\n","import React from 'react';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { InputPassword } from '@app/components/common/inputs/InputPassword/InputPassword';\n\nexport const ConfirmItemPassword: React.FC = () => {\n  return (\n    <BaseButtonsForm.Item\n      name=\"confirmPassword\"\n      label=\"Confirm Password\"\n      dependencies={['newPassword']}\n      rules={[\n        {\n          required: true,\n          message: 'Please input your password!',\n        },\n        ({ getFieldValue }) => ({\n          validator(_, value) {\n            if (!value || getFieldValue('newPassword') === value) {\n              return Promise.resolve();\n            }\n            return Promise.reject(new Error('The two passwords that you entered do not match'));\n          },\n        }),\n      ]}\n    >\n      <InputPassword />\n    </BaseButtonsForm.Item>\n  );\n};\n","import React from 'react';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { InputPassword } from '@app/components/common/inputs/InputPassword/InputPassword';\n\nexport const CurrentPasswordItem: React.FC = () => {\n  return (\n    <BaseButtonsForm.Item\n      name=\"password\"\n      label=\"Current Password\"\n      rules={[\n        {\n          required: true,\n          message: 'Please input your password!',\n        },\n      ]}\n    >\n      <InputPassword />\n    </BaseButtonsForm.Item>\n  );\n};\n","export const passwordPattern = new RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/);\n\nexport const websitePattern = /[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?/gi;\n","import React from 'react';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { InputPassword } from '@app/components/common/inputs/InputPassword/InputPassword';\nimport { passwordPattern } from '@app/constants/patterns';\n\nexport const NewPasswordItem: React.FC = () => {\n  return (\n    <BaseButtonsForm.Item\n      name=\"newPassword\"\n      label=\"New Password\"\n      dependencies={['password']}\n      rules={[\n        {\n          required: true,\n          message: 'Please input your password!',\n        },\n        {\n          pattern: passwordPattern,\n          message:\n            'Your password should be minimum eight characters and contain at least one uppercase letter, one lowercase letter and one number',\n        },\n        ({ getFieldValue }) => ({\n          validator(_, value) {\n            if (!value || getFieldValue('password') !== value) {\n              return Promise.resolve();\n            }\n            return Promise.reject(new Error(\"Your new password can't be same as previous password\"));\n          },\n        }),\n      ]}\n    >\n      <InputPassword />\n    </BaseButtonsForm.Item>\n  );\n};\n","import { Button } from '@app/components/common/buttons/Button/Button';\nimport { media } from '@app/styles/themes/constants';\nimport styled from 'styled-components';\n\nexport const Btn = styled(Button)`\n  margin: 0.5rem 0 1.5rem 0;\n  width: 100%;\n\n  @media only screen and ${media.md} {\n    max-width: 10rem;\n  }\n\n  @media only screen and ${media.xl} {\n    max-width: unset;\n  }\n`;\n","import React, { useState } from 'react';\nimport { Col, Row } from 'antd';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { ConfirmItemPassword } from '@app/components/profile/profileCard/profileFormNav/nav/SecuritySettings/passwordForm/ConfirmPasswordItem/ConfirmPasswordItem';\nimport { CurrentPasswordItem } from '@app/components/profile/profileCard/profileFormNav/nav/SecuritySettings/passwordForm/CurrentPasswordItem/CurrentPasswordItem';\nimport { NewPasswordItem } from '@app/components/profile/profileCard/profileFormNav/nav/SecuritySettings/passwordForm/NewPasswordItem/NewPasswordItem';\nimport { notificationController } from '@app/controllers/notificationController';\nimport * as S from './PasswordForm.styles';\n\nexport const PasswordForm: React.FC = () => {\n  const [isFieldsChanged, setFieldsChanged] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n\n  const onFinish = (values: []) => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      setFieldsChanged(false);\n      notificationController.success({ message: 'Success' });\n      console.log(values);\n    }, 1000);\n  };\n\n  return (\n    <BaseButtonsForm\n      name=\"newPassword\"\n      requiredMark=\"optional\"\n      isFieldsChanged={isFieldsChanged}\n      onFieldsChange={() => setFieldsChanged(true)}\n      footer={\n        <S.Btn loading={isLoading} type=\"primary\" htmlType=\"submit\">\n          Confirm\n        </S.Btn>\n      }\n      onFinish={onFinish}\n    >\n      <Row gutter={{ md: 15, xl: 30 }}>\n        <Col span={24}>\n          <BaseButtonsForm.Item>\n            <BaseButtonsForm.Title>Change Password</BaseButtonsForm.Title>\n          </BaseButtonsForm.Item>\n        </Col>\n\n        <Col xs={24} md={12} xl={24}>\n          <CurrentPasswordItem />\n        </Col>\n\n        <Col xs={24} md={12} xl={24}>\n          <NewPasswordItem />\n        </Col>\n\n        <Col xs={24} md={12} xl={24}>\n          <ConfirmItemPassword />\n        </Col>\n      </Row>\n    </BaseButtonsForm>\n  );\n};\n","import React from 'react';\nimport { Col, Row } from 'antd';\nimport { Card } from 'components/common/Card/Card';\nimport { PasswordForm } from './passwordForm/PasswordForm/PasswordForm';\n\nexport const SecuritySettings: React.FC = () => (\n  <Card>\n    <Row gutter={[30, 0]}>\n      <Col xs={24} xl={10}>\n        <PasswordForm />\n      </Col>\n    </Row>\n  </Card>\n);\n","import React from 'react';\nimport { SecuritySettings } from '@app/components/profile/profileCard/profileFormNav/nav/SecuritySettings/SecuritySettings';\nimport { PageTitle } from '@app/components/common/PageTitle/PageTitle';\n\nconst SecuritySettingsPage: React.FC = () => {\n  return (\n    <>\n      <PageTitle>Security Settings</PageTitle>\n      <SecuritySettings />\n    </>\n  );\n};\n\nexport default SecuritySettingsPage;\n"],"sourceRoot":""}